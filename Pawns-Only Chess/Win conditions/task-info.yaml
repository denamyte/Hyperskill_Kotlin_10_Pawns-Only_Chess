type: edu
files:
  - name: src/chess/Main.kt
    visible: true
    text: |-
      package chess
      
      fun main() {
      //    write your code here
      }
    learner_created: false
  - name: test/PawnsOnlyChessTest.kt
    visible: false
    text: |+
      import org.hyperskill.hstest.dynamic.DynamicTest
      import org.hyperskill.hstest.stage.StageTest
      import org.hyperskill.hstest.testcase.CheckResult
      import org.hyperskill.hstest.testing.TestedProgram
      
      class PawnsOnlyChessTest : StageTest<Any>() {
          @DynamicTest
          fun testAdd5(): CheckResult {
              val pawnsWhite = MutableList<Pair<Int, Int>>(8) { index -> Pair(1, index) }
              val pawnsBlack = MutableList<Pair<Int, Int>>(8) { index -> Pair(6, index) }
      
              val main = TestedProgram()
              var outputString = main.start().trim()
      
              var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
              if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
              position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
              if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")
      
              outputString = main.execute("John").trim()
              position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
              if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")
      
              outputString = main.execute("Amelia").trim()
              position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
              if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
              position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
              if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")
      
              for (ch in 'a'..'h') {
                  outputString = main.execute("${ch}2${ch}4").trim()
                  pawnsWhite.remove(Pair(1, ch - 'h' + 7))
                  pawnsWhite.add(Pair(3, ch - 'h' + 7))
                  position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                  if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                  position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
                  if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")
      
                  outputString = main.execute("${ch}7${ch}5").trim()
                  pawnsBlack.remove(Pair(6, ch - 'h' + 7))
                  pawnsBlack.add(Pair(4, ch - 'h' + 7))
                  position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                  if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                  position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                  if (position == -1) return CheckResult(false, "Player 1 prompt to play is expected.")
              }
      
              outputString = main.execute("exit").trim()
              position = checkOutput(outputString.toLowerCase(), 0, "bye")
              if ( position  == -1 ) return CheckResult(false, "Exit message is expected.")
      
              return CheckResult.correct()
          }
      
          @DynamicTest
          fun test1(): CheckResult {
              val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
              val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }
      
              val main = TestedProgram()
              var outputString = main.start().trim()
      
              var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
              if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
              position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
              if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")
      
              outputString = main.execute("John").trim()
              position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
              if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")
      
              outputString = main.execute("Amelia").trim()
              position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
              if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
              position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
              if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")
      
              outputString = main.execute("e2e4").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 4))
              pawnsWhite.add(Pair(3, 4))
              outputString = main.execute("d7d5").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 3))
              pawnsBlack.add(Pair(4, 3))
              outputString = main.execute("e4d5").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsBlack.remove(Pair(4, 3))
              pawnsWhite.remove(Pair(3, 4))
              pawnsWhite.add(Pair(4, 3))
              outputString = main.execute("c7c6").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 2))
              pawnsBlack.add(Pair(5, 2))
              outputString = main.execute("d5d6").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(4, 3))
              pawnsWhite.add(Pair(5, 3))
              outputString = main.execute("c6c5").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(5, 2))
              pawnsBlack.add(Pair(4, 2))
              outputString = main.execute("d6d7").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(5, 3))
              pawnsWhite.add(Pair(6, 3))
              outputString = main.execute("c5c4").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(4, 2))
              pawnsBlack.add(Pair(3, 2))
              outputString = main.execute("d7d8").trim()
              pawnsWhite.remove(Pair(6, 3))
              pawnsWhite.add(Pair(7, 3))
              position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
              if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after white pawn reaches 8th rank.")
              position = checkOutput(outputString.toLowerCase(), position, "white wins!", "bye")
              if ( position  == -1 ) return CheckResult(false, "Wrong output after white pawn reaches 8th rank.")
      
              return CheckResult.correct()
          }
      
          @DynamicTest
          fun test2(): CheckResult {
              val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
              val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }
      
              val main = TestedProgram()
              var outputString = main.start().trim()
      
              var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
              if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
              position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
              if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")
      
              outputString = main.execute("John").trim()
              position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
              if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")
      
              outputString = main.execute("Amelia").trim()
              position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
              if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
              position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
              if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")
      
              outputString = main.execute("e2e4").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 4))
              pawnsWhite.add(Pair(3, 4))
              outputString = main.execute("d7d5").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 3))
              pawnsBlack.add(Pair(4, 3))
              outputString = main.execute("b2b3").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 1))
              pawnsWhite.add(Pair(2, 1))
              outputString = main.execute("d5e4").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsWhite.remove(Pair(3, 4))
              pawnsBlack.remove(Pair(4, 3))
              pawnsBlack.add(Pair(3, 4))
              outputString = main.execute("b3b4").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(2, 1))
              pawnsWhite.add(Pair(3, 1))
              outputString = main.execute("e4e3").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(3, 4))
              pawnsBlack.add(Pair(2, 4))
              outputString = main.execute("b4b5").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(3, 1))
              pawnsWhite.add(Pair(4, 1))
              outputString = main.execute("e3e2").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(2, 4))
              pawnsBlack.add(Pair(1, 4))
              outputString = main.execute("b5b6").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(4, 1))
              pawnsWhite.add(Pair(5, 1))
              outputString = main.execute("e2e1").trim()
              pawnsBlack.remove(Pair(1, 4))
              pawnsBlack.add(Pair(0, 4))
              position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
              if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after black pawn reaches 1st rank.")
              position = checkOutput(outputString.toLowerCase(), position, "black wins!", "bye")
              if ( position  == -1 ) return CheckResult(false, "Wrong output after black pawn reaches 1st rank.")
      
              return CheckResult.correct()
          }
      
          @DynamicTest
          fun test3(): CheckResult {
              val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
              val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }
      
              val main = TestedProgram()
              var outputString = main.start().trim()
      
              var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
              if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
              position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
              if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")
      
              outputString = main.execute("John").trim()
              position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
              if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")
      
              outputString = main.execute("Amelia").trim()
              position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
              if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
              position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
              if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")
      
              outputString = main.execute("a2a4").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 0))
              pawnsWhite.add(Pair(3, 0))
              outputString = main.execute("b7b5").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 1))
              pawnsBlack.add(Pair(4, 1))
              outputString = main.execute("a4b5").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsBlack.remove(Pair(4, 1))
              pawnsWhite.remove(Pair(3, 0))
              pawnsWhite.add(Pair(4, 1))
              outputString = main.execute("c7c6").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 2))
              pawnsBlack.add(Pair(5, 2))
              outputString = main.execute("b5c6").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsBlack.remove(Pair(5, 2))
              pawnsWhite.remove(Pair(4, 1))
              pawnsWhite.add(Pair(5, 2))
              outputString = main.execute("a7a5").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 0))
              pawnsBlack.add(Pair(4, 0))
              outputString = main.execute("c6d7").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 3))
              pawnsWhite.remove(Pair(5, 2))
              pawnsWhite.add(Pair(6, 3))
              outputString = main.execute("a5a4").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(4, 0))
              pawnsBlack.add(Pair(3, 0))
              outputString = main.execute("d2d4").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 3))
              pawnsWhite.add(Pair(3, 3))
              outputString = main.execute("e7e5").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 4))
              pawnsBlack.add(Pair(4, 4))
              outputString = main.execute("d4e5").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsBlack.remove(Pair(4, 4))
              pawnsWhite.remove(Pair(3, 3))
              pawnsWhite.add(Pair(4, 4))
              outputString = main.execute("f7f6").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 5))
              pawnsBlack.add(Pair(5, 5))
              outputString = main.execute("e5f6").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsBlack.remove(Pair(5, 5))
              pawnsWhite.remove(Pair(4, 4))
              pawnsWhite.add(Pair(5, 5))
              outputString = main.execute("h7h5").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 7))
              pawnsBlack.add(Pair(4, 7))
              outputString = main.execute("f6g7").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 6))
              pawnsWhite.remove(Pair(5, 5))
              pawnsWhite.add(Pair(6, 6))
              outputString = main.execute("a4a3").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(3, 0))
              pawnsBlack.add(Pair(2, 0))
              outputString = main.execute("b2a3").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsBlack.remove(Pair(2, 0))
              pawnsWhite.remove(Pair(1, 1))
              pawnsWhite.add(Pair(2, 0))
              outputString = main.execute("h5h4").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(4, 7))
              pawnsBlack.add(Pair(3, 7))
              outputString = main.execute("c2c3").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 2))
              pawnsWhite.add(Pair(2, 2))
              outputString = main.execute("h4h3").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(3, 7))
              pawnsBlack.add(Pair(2, 7))
              outputString = main.execute("g2h3").trim()
              pawnsBlack.remove(Pair(2, 7))
              pawnsWhite.remove(Pair(1, 6))
              pawnsWhite.add(Pair(2, 7))
              position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
              if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after white captures all black pawns.")
              position = checkOutput(outputString.toLowerCase(), position, "white wins!", "bye")
              if ( position  == -1 ) return CheckResult(false, "Wrong output after white wins after capturing all black pawns.")
      
              return CheckResult.correct()
          }
      
          @DynamicTest
          fun test4(): CheckResult {
              val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
              val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }
      
              val main = TestedProgram()
              var outputString = main.start().trim()
      
              var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
              if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
              position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
              if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")
      
              outputString = main.execute("John").trim()
              position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
              if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")
      
              outputString = main.execute("Amelia").trim()
              position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
              if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
              position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
              if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")
      
              outputString = main.execute("a2a4").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 0))
              pawnsWhite.add(Pair(3, 0))
              outputString = main.execute("b7b5").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 1))
              pawnsBlack.add(Pair(4, 1))
              outputString = main.execute("h2h3").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 7))
              pawnsWhite.add(Pair(2, 7))
              outputString = main.execute("b5a4").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsWhite.remove(Pair(3, 0))
              pawnsBlack.remove(Pair(4, 1))
              pawnsBlack.add(Pair(3, 0))
              outputString = main.execute("b2b3").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 1))
              pawnsWhite.add(Pair(2, 1))
              outputString = main.execute("a4b3").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsWhite.remove(Pair(2, 1))
              pawnsBlack.remove(Pair(3, 0))
              pawnsBlack.add(Pair(2, 1))
              outputString = main.execute("h3h4").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(2, 7))
              pawnsWhite.add(Pair(3, 7))
              outputString = main.execute("b3c2").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 2))
              pawnsBlack.remove(Pair(2, 1))
              pawnsBlack.add(Pair(1, 2))
              outputString = main.execute("h4h5").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(3, 7))
              pawnsWhite.add(Pair(4, 7))
              outputString = main.execute("c7c5").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 2))
              pawnsBlack.add(Pair(4, 2))
              outputString = main.execute("d2d4").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 3))
              pawnsWhite.add(Pair(3, 3))
              outputString = main.execute("c5d4").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsWhite.remove(Pair(3, 3))
              pawnsBlack.remove(Pair(4, 2))
              pawnsBlack.add(Pair(3, 3))
              outputString = main.execute("e2e3").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 4))
              pawnsWhite.add(Pair(2, 4))
              outputString = main.execute("d4e3").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsWhite.remove(Pair(2, 4))
              pawnsBlack.remove(Pair(3, 3))
              pawnsBlack.add(Pair(2, 4))
              outputString = main.execute("g2g4").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 6))
              pawnsWhite.add(Pair(3, 6))
              outputString = main.execute("e3f2").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 5))
              pawnsBlack.remove(Pair(2, 4))
              pawnsBlack.add(Pair(1, 5))
              outputString = main.execute("h5h6").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(4, 7))
              pawnsWhite.add(Pair(5, 7))
              outputString = main.execute("g7h6").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsWhite.remove(Pair(5, 7))
              pawnsBlack.remove(Pair(6, 6))
              pawnsBlack.add(Pair(5, 7))
              outputString = main.execute("g4g5").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(3, 6))
              pawnsWhite.add(Pair(4, 6))
              outputString = main.execute("h6g5").trim()
              pawnsWhite.remove(Pair(4, 6))
              pawnsBlack.remove(Pair(5, 7))
              pawnsBlack.add(Pair(4, 6))
              position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
              if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after black captures all white pawns.")
              position = checkOutput(outputString.toLowerCase(), position, "black wins!", "bye")
              if ( position  == -1 ) return CheckResult(false, "Wrong output after black wins after capturing all white pawns.")
      
              return CheckResult.correct()
          }
      
          @DynamicTest
          fun test5(): CheckResult {
              val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
              val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }
      
              val main = TestedProgram()
              var outputString = main.start().trim()
      
              var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
              if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
              position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
              if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")
      
              outputString = main.execute("John").trim()
              position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
              if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")
      
              outputString = main.execute("Amelia").trim()
              position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
              if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
              position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
              if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")
      
              outputString = main.execute("a2a4").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 0))
              pawnsWhite.add(Pair(3, 0))
              outputString = main.execute("b7b5").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 1))
              pawnsBlack.add(Pair(4, 1))
              outputString = main.execute("a4b5").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsBlack.remove(Pair(4, 1))
              pawnsWhite.remove(Pair(3, 0))
              pawnsWhite.add(Pair(4, 1))
              outputString = main.execute("c7c6").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 2))
              pawnsBlack.add(Pair(5, 2))
              outputString = main.execute("b5c6").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsBlack.remove(Pair(5, 2))
              pawnsWhite.remove(Pair(4, 1))
              pawnsWhite.add(Pair(5, 2))
              outputString = main.execute("a7a5").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 0))
              pawnsBlack.add(Pair(4, 0))
              outputString = main.execute("c6d7").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 3))
              pawnsWhite.remove(Pair(5, 2))
              pawnsWhite.add(Pair(6, 3))
              outputString = main.execute("a5a4").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(4, 0))
              pawnsBlack.add(Pair(3, 0))
              outputString = main.execute("d2d4").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsWhite.remove(Pair(1, 3))
              pawnsWhite.add(Pair(3, 3))
              outputString = main.execute("e7e5").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 4))
              pawnsBlack.add(Pair(4, 4))
              outputString = main.execute("d4e5").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsBlack.remove(Pair(4, 4))
              pawnsWhite.remove(Pair(3, 3))
              pawnsWhite.add(Pair(4, 4))
              outputString = main.execute("f7f6").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 5))
              pawnsBlack.add(Pair(5, 5))
              outputString = main.execute("e5f6").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsBlack.remove(Pair(5, 5))
              pawnsWhite.remove(Pair(4, 4))
              pawnsWhite.add(Pair(5, 5))
              outputString = main.execute("h7h5").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 7))
              pawnsBlack.add(Pair(4, 7))
              outputString = main.execute("f6g7").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsBlack.remove(Pair(6, 6))
              pawnsWhite.remove(Pair(5, 5))
              pawnsWhite.add(Pair(6, 6))
              outputString = main.execute("a4a3").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(3, 0))
              pawnsBlack.add(Pair(2, 0))
              outputString = main.execute("b2a3").toLowerCase().trim()
              if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
              pawnsBlack.remove(Pair(2, 0))
              pawnsWhite.remove(Pair(1, 1))
              pawnsWhite.add(Pair(2, 0))
              outputString = main.execute("h5h4").toLowerCase().trim()
              if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
              pawnsBlack.remove(Pair(4, 7))
              pawnsBlack.add(Pair(3, 7))
              outputString = main.execute("h2h3").trim()
              pawnsWhite.remove(Pair(1, 7))
              pawnsWhite.add(Pair(2, 7))
              position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
              if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after white captures all black pawns.")
              position = checkOutput(outputString.toLowerCase(), position, "stalemate!", "bye")
              if ( position  == -1 ) return CheckResult(false, "Wrong output after white wins after stalemate.")
      
              return CheckResult.correct()
          }
      
      }
      
      fun checkChessboard(outputString: String, searchPos: Int, pawnsWhite: List<Pair<Int, Int>>, pawnsBlack: List<Pair<Int, Int>>): Int {
          fun createChessboardStringList(pawnsWhite: List<Pair<Int, Int>>, pawnsBlack: List<Pair<Int, Int>>): List<String> {
              var chessboard = "  +---+---+---+---+---+---+---+---+\n"
              for (i in 7 downTo 0) {
                  chessboard += "${i + 1} |"
                  for (j in 0..7) {
                      val square = when {
                          pawnsWhite.contains(Pair(i, j)) -> 'W'
                          pawnsBlack.contains(Pair(i, j)) -> 'B'
                          else -> ' '
                      }
                      chessboard += " $square |"
                  }
                  chessboard += "\n  +---+---+---+---+---+---+---+---+\n"
              }
              chessboard += "    a   b   c   d   e   f   g   h\n"
      //        println(chessboard)
              return chessboard.trim().split("\n").map { it.trim() }
          }
          val chessboardStringList = createChessboardStringList(pawnsWhite, pawnsBlack)
          return checkOutput(outputString, searchPos, * chessboardStringList.toTypedArray())
      }
      
      fun checkOutput(outputString: String, searchPos: Int, vararg checkStr: String): Int {
          var searchPosition = searchPos
          for (str in checkStr) {
              val findPosition = outputString.indexOf(str, searchPosition)
              if (findPosition == -1) return -1
              if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return -1
              searchPosition = findPosition + str.length
          }
          return searchPosition
      }
    
    
    learner_created: false
  - name: src/chess/Board.kt
    visible: true
    text: |-
      package chess
      
      import kotlin.math.abs
      
      private const val SIZE = 8
      private const val SEP_LINE = "  +---+---+---+---+---+---+---+---+\n"
      private const val LETTER_LINE = "    a   b   c   d   e   f   g   h\n"
      private val DATA_LINE = "%s | ".repeat(9).trim() + "\n"
      private val rankRange = 8 downTo 1
      
      private fun createRank(c: Char) = MutableList(SIZE) { c }
      
      class Board {
          private val field: MutableList<MutableList<Char>> = MutableList(SIZE) { createRank(' ') }
          private val fieldByColor = mapOf(
              ChessColor.White to field,
              ChessColor.Black to field.reversed()
          )
          private var lastMove: Move = Move(0, 0, 0, 0)
      
          init {
              field[1] = createRank('W')
              field[6] = createRank('B')
          }
      
          override fun toString() = buildString {
              append(SEP_LINE)
              append(
                  rankRange.joinToString(SEP_LINE) {
                      DATA_LINE.format(it, *field[it - 1].toTypedArray())
                  }
              )
              append(SEP_LINE)
              append(LETTER_LINE)
          }
      
          fun isPawnOfColorAt(color: ChessColor, move: Move) = field[move.y1][move.x1] == color.sym
      
          fun makeMove(color: ChessColor, move: Move): Boolean {
              val m = if (color == ChessColor.White) move else move.flip()
      
              // Check if this move is taking an opposite pawn
              if (m.x1 != m.x2) {
                  if (abs(m.x2 - m.x1) != 1 || m.y2 - m.y1 != 1) return false
                  if (field[move.y2][move.x2] == color.oppColor().sym) {
                      // todo: count taking pawns...
      
                      return finishMove(color, move)
                  }
                  if (!lastMove.isDouble) return false
                  if ((lastMove.y1 + lastMove.y2) / 2 != move.y2 ||
                      lastMove.x2 != move.x2) return false
      
                  // It's an "en passant" taking !!
                  field[lastMove.y2][lastMove.x2] = ' '  // Erasing the opposite pawn
                  // todo: count taking pawns...
      
                  return finishMove(color, move)
              }
      
              // Check if the coordinates difference is valid
              if (m.y1 == 1) {
                  if (m.y2 - m.y1 !in 1..2) return false
              } else {
                  if (m.y2 - m.y1 != 1) return false
              }
      
              // Check if the coordinates are empty on the pawn's way
              val f = fieldByColor[color]!!
              for (y in m.y1 + 1..m.y2) {
                  if (f[y][m.x1] != ' ') return false
              }
      
              return finishMove(color, move)
          }
      
          private fun finishMove(color: ChessColor, move: Move): Boolean {
              field[move.y1][move.x1] = ' '
              field[move.y2][move.x2] = color.sym
              lastMove = move
              return true
          }
      }
    learner_created: true
  - name: src/chess/ChessColor.kt
    visible: true
    text: |-
      package chess
      
      enum class ChessColor(val sym: Char, val oppSym: Char, val value: String) {
          Black('B', 'W', "black"),
          White('W', 'B', "white");
      
          fun oppColor() = if (this == White) Black else White
      }
    learner_created: true
  - name: src/chess/Game.kt
    visible: true
    text: |-
      package chess
      
      private val askNamesMap = mapOf(
          "First" to ChessColor.White,
          "Second" to ChessColor.Black
      )
      private val MOVE_REGEX = Regex("([a-h][1-8]){2}")
      
      class Game {
          private lateinit var pMap: Map<ChessColor, Player>
          private val board = Board()
      
          fun run() {
              pMap = askNamesMap.map { (num, color) ->
                  println("$num Player's name:")
                  Pair(color, Player(readln(), color))
              }.toMap()
              var color = ChessColor.Black
              var sMove = ""
              while (sMove != "exit") {
                  println(board)
      
                  color = if (color == ChessColor.Black) ChessColor.White else ChessColor.Black
                  val p = pMap[color]!!
                  val movePrompt = "${p.name}'s turn:"
                  while (true) {
                      println(movePrompt)
                      sMove = readln()
                      if (sMove == "exit") break
                      if (!isMoveFormatValid(sMove)) {
                          println("Invalid Input")
                          continue
                      }
                      val move = Move(sMove)
                      if (!board.isPawnOfColorAt(color, move)) {
                          println("No ${color.value} pawn at ${sMove.substring(0, 2)}")
                          continue
                      }
                      if (!board.makeMove(color, move)) {
                          println("Invalid Input")
                          continue
                      }
                      break
                  }
              }
              println("Bye!")
          }
      
          private fun isMoveFormatValid(move: String) = MOVE_REGEX.matches(move)
      
      }
    learner_created: true
  - name: src/chess/Player.kt
    visible: true
    text: |-
      package chess
      
      class Player(val name: String, val color: ChessColor)
    learner_created: true
  - name: src/chess/Move.kt
    visible: true
    text: |-
      package chess
      
      import kotlin.math.abs
      
      private const val LETTERS = "abcdefgh"
      class Move(val x1: Int, val y1: Int, val x2: Int, val y2: Int) {
      
          constructor(rawMove: String) : this(
              LETTERS.indexOf(rawMove[0]),
              rawMove[1].digitToInt() - 1,
              LETTERS.indexOf(rawMove[2]),
              rawMove[3].digitToInt() - 1
          )
      
          val isDouble get() = abs(y2 - y1) == 2
      
          fun flip() = Move(x1, 7 - y1, x2, 7 - y2)
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/13178#comment
status: Unchecked
record: -1
